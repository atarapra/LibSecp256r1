#define macro MAIN() = takes(0) returns(0) {
    // jacobi_addtion
    0x00 calldataload

    0x00                                                                            // [t]
    0x01                                                                            // [nT, t, x]
    0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f              // [r, nT, t, x]
    loop:
        dup4 iszero
        break jumpi

    dup4                                // [x, r, nT, t, x]
    dup2                                 // [r, x, r, nT, t, x]
    div                                  // [q = r/x, r, nT, t , x]
    0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f     // [P, q, r, nT, t, x]
    dup1                                // [P, P, q, r, nT, t, x]
    dup5                                // [nT, P, P, q, r, nT, t, x]
    dup4                                // [q, nT, P, P, q, r, nT, t, x]
    mulmod                              // [q*nT%P, P, q, r, nT, t, x]
    dup2 sub                            // [P-q*nT%P, P, q, r, nT, t, x]
    dup6                                // [t ,P-q*n%P, P, q, r, nT, t, x]
    addmod                              // [nT, q, r, t, tmp, x]
    swap3                               // [t, q, r, nT, tmp, x]
    swap4                               // [tmp, q, r, nT, t, x]               
    pop                                 
    dup5                                // [x, q, r, nT, t, x]
    mul                                 // [x*q, r, nT, t, x]
    swap1                               // [r, x*q, nT, t, x]
    sub                                 // [x=r-x*q, nT, t, r=x]
    swap3                               // [r, nT, t, x]                        
    loop jump

    break:
        pop pop swap1 pop
    // inv_mod()
    0x00 mstore
    0x20 0x00 return

}